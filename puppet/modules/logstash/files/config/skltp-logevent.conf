input {
  ### VP ###	
  file {
    path => "/Users/magnus/Documents/projects/Inera/logstash/logs/mule-app-vp.log*"
    type => "vp-log"
    #Använder en multiline-codec för att slå ihop text mellan timestamp till en event
    codec => multiline {
      # http://logstash.net/docs/1.2.2/codecs/multiline
      # Merge lines not starting with a date up to the previous line
      charset => "UTF-8"
      pattern => "^%{TIMESTAMP_ISO8601}"
      multiline_tag => "log"     
      negate => true
      what => previous
    }   
  } 
  ### wiretap ###	  
  file {
    path => "/Users/magnus/Documents/projects/Inera/logstash/logs/mule-app-wiretap.log*"
    type => "wiretap-log"
    #Använder en multiline-codec för att slå ihop text mellan timestamp till en event
    codec => multiline {
      # http://logstash.net/docs/1.2.2/codecs/multiline
      # Merge lines not starting with a date up to the previous line
      charset => "UTF-8"
      pattern => "^%{TIMESTAMP_ISO8601}"
      multiline_tag => "log"        
      negate => true
      what => previous
    }   
  } 
  ### EI ###  
   file {
    path => "/Users/magnus/Documents/projects/Inera/logstash/logs/mule-app-skltp-ei-application-mule.log*"
    type => "ei-log"
    #Använder en multiline-codec för att slå ihop text mellan timestamp till en event
    codec => multiline {
      # http://logstash.net/docs/1.2.2/codecs/multiline
      # Merge lines not starting with a date up to the previous line
      charset => "UTF-8"
      pattern => "^%{TIMESTAMP_ISO8601}"
      multiline_tag => "log"        
      negate => true
      what => previous
    }   
  } 
   ### Aggregerande tjänster ###   
   file {
    path => "/Users/magnus/Documents/projects/Inera/logstash/logs/mule-app-GetAggregated.log*"
    type => "aggregated-log"
    #Använder en multiline-codec för att slå ihop text mellan timestamp till en event
    codec => multiline {
      # http://logstash.net/docs/1.2.2/codecs/multiline
      # Merge lines not starting with a date up to the previous line
      charset => "UTF-8"
      pattern => "^%{TIMESTAMP_ISO8601}"
      multiline_tag => "log"        
      negate => true
      what => previous
    }   
  }   
}

filter {
	 ######## INFO SOM GÄLLER SAMTLIGA FILER ########
    grok {
    	match => [ "message", "%{TIMESTAMP_ISO8601:log-timestamp}"]   	
  	}  
	######### Identifierar soi-toolkit-logEvent  #########  
	#if [type] == "vp-log" { 
	  	grep {
  			drop => "false"
	    	match => [ "message", "logEvent-error.start" ]
		  	add_field => [ "log-event", "logEvent-error" ]
	  		add_field => ["waypoint", "xresp-out", "error", "true"]      	
  		}
	#}else {
	#  	grep {
    #	drop => "false"
	#    	match => [ "message", "logEvent-error.start" ]
	#	  	add_field => [ "log-event", "logEvent-error" ]     	
  	#	}	
	#}	

  	grep {
  		drop => "false"
    	match => [ "message", "logEvent-debug.start" ]
    	add_field => [ "log-event", "logEvent-debug" ]
  	}
  	grep {
  		drop => "false"
    	match => [ "message", "logEvent-info.start" ]
    	add_field => [ "log-event", "logEvent-info" ]
  	}  
  	
  	######### Plockar info för soi-toolkit-LogEvent  #########  
    #         Sparar ej följande fält  #
    		  #integrationScenarioId 
    		  #contractid
    		  #BusinessContextId
    		    				  	
  	if [log-event] =~ /^logEvent-/ {
    	grok {
    		match => [ "message", "Endpoint=%{GREEDYDATA:endpoint}"]  
    		tag_on_failure => ["endpointParseFailure"]  
  		}
    	grok {
    		match => [ "message", "MessageId=%{UUID:messageId}"]
    		tag_on_failure => ["messageidParseFailure"]
  		}
     	grok {
    		match => [ "message", "BusinessCorrelationId=%{UUID:businessCorrelationId}"]
    		tag_on_failure => ["BusinessCorrelationidParseFailure"]
  		}
     	grok {
    		match => [ "message", "Host=%{GREEDYDATA:hostid}"]
    		tag_on_failure => ["hostidParseFailure"]
  		}   	
     	grok {
    		match => [ "message", "-senderid=%{GREEDYDATA:senderid}"]
    		tag_on_failure => ["senderidParseFailure"]
  		}  			 		
     	grok {
    		match => [ "message", "-cxf_service=%{GREEDYDATA:tjanstekontrakt}"]
    		tag_on_failure => ["tjanstekontraktParseFailure"]
  		}   		 		
     	grok {
    		match => [ "message", "-rivversion=%{GREEDYDATA:rivversion}"]
    		tag_on_failure => ["rivversionParseFailure"]
  		} 
      	grok {
    		match => [ "message", "-receiverid=%{GREEDYDATA:receiverid}"]
    		tag_on_failure => ["receiveridErrorParseFailure"]
  		}
      	grok {
    		match => [ "message", "Payload=%{GREEDYDATA:payload}"]
    		tag_on_failure => ["payloadParseFailure"]
  		} 
  		  
  		#### OM ERROR-post ####
  		if [log-event] == "logEvent-error" { 	
	  		#### Om det är vp-log sätts waypoint=xresp-out och error=true ####
	      	grok {
    			match => [ "message", "-sessionErrorDescription=%{GREEDYDATA:sessionErrorDescription}"]    				    		
    			tag_on_failure => ["sessionErrorParseFailure"]
	  		}	
      		grok {
    			match => [ "message", "-sessionErrorTechnicalDescription=%{GREEDYDATA:sessionErrorTechnicalDescription}"]
	    		tag_on_failure => ["sessionErrorTechnicalParseFailure"]
  			}	  		
  			if [type] != "vp-log" {   			 		 			 
  				grok {
    				match => [ "message", "LogMessage=%{GREEDYDATA:waypoint}"]
	    			tag_on_failure => ["waypointParseFailure"]
		  		}	
		  	}	  				  															 			 
  		}else {
  			grok {
    			match => [ "message", "LogMessage=%{GREEDYDATA:waypoint}"]
    			tag_on_failure => ["waypointParseFailure"]
	  		}
  			#### Kolla om posten är xresp-out+info/debug för att kunna ta bort den sedan (error-post ersätter den och agerar som en xresp-out) ####
  			if [waypoint] == "xresp-out" {
      			grok {
    				match => [ "message", "-sessionErrorTechnicalDescription=%{GREEDYDATA:sessionErrorTechnicalDescription}"]
    				tag_on_failure => [""]
    				add_field => ["error", "true"] 
  				}  	
	  			#lägg till error=false om ej error
  				if [error] != "true" {
  					alter {
	  					add_field => ["error", "false"] 
  					}
	  			}  				 	
	  		} 	  		
  		}  
  		 		   		  			  			
  		########   SPECIELL HANTERING VID VP-LOG ########
  		if [type] == "vp-log" {    		  
  			######## SPARAR FÄLT SOM ENDAST FINNS VID RESPONSE ########
  			if [waypoint] == "xresp-out" {
  				grok {
    				match => [ "message", "-time.producer=%{NUMBER:time_producer:int}"]
	    			tag_on_failure => ["time_producerParseFailure"]
		  		}   		 		
    		  	grok {
    				match => [ "message", "-endpoint_url=%{GREEDYDATA:endpoint_url}"]
    				tag_on_failure => ["endpoint_urlParseFailure"]
		  		}  				 	
  			}  		 
  		
  			########     Konverterar time_producer till integer   ########
	  		mutate {
			    convert => [ "time.producer", "integer" ]
			}  

			######### Tar bort response-objekt med 'grep' om det är ett response-objekt med error. ######## 
	  		if [log-event] == "logEvent-debug" and [waypoint] == "xresp-out" and [error] == "true" {
	  			drop {}  	
			}	
		  	if [log-event] == "logEvent-info" and [waypoint] == "xresp-out" and [error] == "true" {
	  			drop {}  	
			}			
		}	
  	}
}

output {
  # Print each event to stdout.
  stdout {
    # Enabling 'rubydebug' codec on the stdout output will make logstash
    # pretty-print the entire event as something similar to a JSON representation.
    codec => rubydebug
  }

  # You can have multiple outputs. All events generally to all outputs.
  # Output events to elasticsearch
  elasticsearch {
    # Setting 'embedded' will run  a real elasticsearch server inside logstash.
    # This option below saves you from having to run a separate process just
    # for ElasticSearch, so you can get started quicker!
    embedded => true
  }
}